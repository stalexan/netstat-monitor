#!/usr/bin/env python3
#
# Copyright 2022 Sean Alexandre
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

""" TODO2: docstring here """

# Standard library imports
import sys
from unittest import TestCase, TestLoader, TextTestRunner
from unittest.result import TestResult
from unittest.suite import TestSuite

# Third-party imports
import netaddr # pylint: disable=import-error

# Local imports
sys.path.append('..')
from netstat import GenericFilter, MonitorException, SocketInfo # pylint: disable=wrong-import-position

# Open debug output file
DEBUG_OUTPUT = None
#DEBUG_OUTPUT_FILE_NAME = "./debug-output.txt"
DEBUG_OUTPUT_FILE_NAME = None
if not DEBUG_OUTPUT_FILE_NAME is None:
    DEBUG_OUTPUT = open(DEBUG_OUTPUT_FILE_NAME, 'w', encoding="utf-8")

def log(message) -> None:
    """ TODO2: docstring here """

    if not DEBUG_OUTPUT is None:
        DEBUG_OUTPUT.write(message)
        DEBUG_OUTPUT.write('\n')
        DEBUG_OUTPUT.flush()

class TestSocketInfo(TestCase):
    """ TODO2: docstring here """

    def test_parsing_hex2dec(self) -> None:
        """ TODO2: docstring here """

        self.assertEqual(SocketInfo._hex2dec("0"), "0")
        self.assertRaises(ValueError, SocketInfo._hex2dec, "")
        self.assertEqual(SocketInfo._hex2dec("FF"), "255")
        self.assertRaises(ValueError, SocketInfo._hex2dec, "FFz")
        self.assertEqual(SocketInfo._hex2dec("abcdef1234"), "737894404660")

    def test_parsing_ip(self) -> None:
        """ TODO2: docstring here """

        self.assertEqual(SocketInfo._ip("FFFFFFFF"), "255.255.255.255")
        self.assertRaises(MonitorException, SocketInfo._ip, "0")
        self.assertEqual(SocketInfo._ip("293DA8DF"), "223.168.61.41")

    def test_parsing_ip6(self) -> None:
        """ TODO2: docstring here """

        self.assertEqual(
            netaddr.IPAddress(SocketInfo._ip("B90D01200000000067452301EFCDAB89")),
            netaddr.IPAddress("2001:db9::0123:4567:89ab:cdef"))
        self.assertEqual(SocketInfo._ip("0000000000000000FFFF00000100007F"), "127.0.0.1")

    def test_parsing_ip_port(self) -> None:
        """ TODO2: docstring here """

        self.assertEqual(SocketInfo._convert_ip_port("293DA8DF:0050"), ("223.168.61.41", "80"))

    def test_parsing_is_ip_addr_private(self) -> None:
        """ TODO2: docstring here """

        self.assertEqual(SocketInfo._is_ip_addr_private("172.27.0.30"), True)
        self.assertEqual(SocketInfo._is_ip_addr_private("fde4:8dba:82e1::1"), True)
        self.assertEqual(SocketInfo._is_ip_addr_private("74.125.224.194"), False)
        self.assertEqual(SocketInfo._is_ip_addr_private("2001:db9::0123:4567:89ab:cdef"), False)

    def test_parsing_is_ip_addr_loopback(self) -> None:
        """ TODO2: docstring here """

        self.assertEqual(SocketInfo._is_ip_addr_loopback("127.0.0.1"), True)
        self.assertEqual(SocketInfo._is_ip_addr_loopback("::1"), True)

    # pylint: disable=line-too-long
    def test_construct(self) -> None:
        """
        sl   local_address rem_address   st tx_queue rx_queue tr tm->when retrnsmt   uid  timeout inode ref pointer drops
        268: 0100007F:0035 00000000:0000 07 00000000:00000000 00:00000000 00000000     0        0 139165 2 0000000000000000 0
        """
        line: str = "268: 0100007F:0035 00000000:0000 07 00000000:00000000 00:00000000 00000000     0        0 139165 2 0000000000000000 0"
        info: SocketInfo = SocketInfo.create_from_line("tcp", line)
        info.finish_initializing()
        self.assertEqual(info.state, "CLOSE")
        self.assertEqual(info.local_host, "127.0.0.1")
        self.assertEqual(info.local_port, "53")
        self.assertEqual(info.fingerprint, "type:tcp local_address:0100007F:0035 rem_address:00000000:0000")

    def setUp(self) -> None:
        pass

class TestFilters(TestCase):
    """ TODO2: docstring here """

    def test_filter_exe(self) -> None:
        """ TODO2: docstring here """

        # Test match
        fil = GenericFilter("test", exe="/usr/sbin/ntpd")
        socket_info1: SocketInfo = SocketInfo._create_from_params(exe="/usr/sbin/ntpd")
        self.assertTrue(fil.filter_out(socket_info1))

        # Test mismatch
        socket_info2: SocketInfo = SocketInfo._create_from_params(exe="/usr/sbin/ntpd2")
        self.assertFalse(fil.filter_out(socket_info2))

    def test_filter_cmdline(self) -> None:
        """ TODO2: docstring here """

        # Test match
        fil = GenericFilter("test", cmdline="/usr/bin/mpop -Q account1")
        socket_info1: SocketInfo = SocketInfo._create_from_params(
            cmdline="/usr/bin/mpop -Q account1")
        self.assertTrue(fil.filter_out(socket_info1))

        # Test mismatch
        socket_info2: SocketInfo = SocketInfo._create_from_params(cmdline="/usr/bin/mpop")
        self.assertFalse(fil.filter_out(socket_info2))

    def test_filter_cmdline_is_re(self) -> None:
        """ TODO2: docstring here """

        # Test match
        fil = GenericFilter("test", cmdline="/usr/bin/[^ ]* -Q account1",
            cmdline_is_re=True)
        socket_info1: SocketInfo = SocketInfo._create_from_params(
            cmdline="/usr/bin/boop -Q account1")
        self.assertTrue(fil.filter_out(socket_info1))

        # Test mismatch
        socket_info2: SocketInfo = SocketInfo._create_from_params(
            cmdline="/usr/bin/boop -R account1")
        self.assertFalse(fil.filter_out(socket_info2))

    def test_filter_user(self) -> None:
        """ TODO2: docstring here """

        # Test match
        fil = GenericFilter("test", user="root")
        socket_info1: SocketInfo = SocketInfo._create_from_params(user_name="root")
        self.assertTrue(fil.filter_out(socket_info1))

        # Test mismatch
        socket_info2: SocketInfo = SocketInfo._create_from_params(user_name="www-data")
        self.assertFalse(fil.filter_out(socket_info2))


    def test_filter_local_hosts(self) -> None:
        """ TODO2: docstring here """

        # Test match
        fil = GenericFilter("test", local_hosts="127.0.0.1")
        socket_info1: SocketInfo = SocketInfo._create_from_params(local_host="127.0.0.1")
        self.assertTrue(fil.filter_out(socket_info1))

        # Test mismatch
        socket_info2: SocketInfo = SocketInfo._create_from_params(local_host="128.0.0.1")
        self.assertFalse(fil.filter_out(socket_info2))

    def test_filter_local_ports(self) -> None:
        """ TODO2: docstring here """

        # Test match
        fil = GenericFilter("test", local_ports="1234,5432,6789")
        socket_info1: SocketInfo = SocketInfo._create_from_params(local_port="1234")
        self.assertTrue(fil.filter_out(socket_info1))
        socket_info2: SocketInfo = SocketInfo._create_from_params(local_port="6789")
        self.assertTrue(fil.filter_out(socket_info2))

        # Test mismatch
        socket_info3: SocketInfo = SocketInfo._create_from_params(local_port="5555")
        self.assertFalse(fil.filter_out(socket_info3))

    def test_filter_remote_hosts(self) -> None:
        """ TODO2: docstring here """

        # Test match
        fil = GenericFilter("test",
            remote_hosts="www.somedomain.net,anotherdomain.com,www.andanother.org")
        socket_info1: SocketInfo = SocketInfo._create_from_params(
            remote_host_name="www.somedomain.net")
        self.assertTrue(fil.filter_out(socket_info1))
        socket_info2: SocketInfo = SocketInfo._create_from_params(
            remote_host_name="www.andanother.org")
        self.assertTrue(fil.filter_out(socket_info2))

        # Test mismatch
        socket_info3: SocketInfo = SocketInfo._create_from_params(
            remote_host_name="www.somedomain2.net")
        self.assertFalse(fil.filter_out(socket_info3))

    def test_filter_remote_ips(self) -> None:
        """ TODO2: docstring here """

        # Test match
        fil = GenericFilter("test", remote_ips="40.50.60.70,23.24.25.26,77.78.79.0/24")
        socket_info1: SocketInfo = SocketInfo._create_from_params(remote_host="23.24.25.26")
        self.assertTrue(fil.filter_out(socket_info1))
        socket_info2: SocketInfo = SocketInfo._create_from_params(remote_host="77.78.79.80")
        self.assertTrue(fil.filter_out(socket_info2))

        # Test mismatch
        socket_info3: SocketInfo = SocketInfo._create_from_params(remote_host="77.78.80.80")
        self.assertFalse(fil.filter_out(socket_info3))

    def test_filter_remote_ports(self) -> None:
        """ TODO2: docstring here """

        # Test match
        fil = GenericFilter("test", remote_ports="1234,5432,6789")
        socket_info1: SocketInfo = SocketInfo._create_from_params(remote_port="1234")
        self.assertTrue(fil.filter_out(socket_info1))
        socket_info2: SocketInfo = SocketInfo._create_from_params(remote_port="6789")
        self.assertTrue(fil.filter_out(socket_info2))

        # Test mismatch
        socket_info3: SocketInfo = SocketInfo._create_from_params(remote_port="5555")
        self.assertFalse(fil.filter_out(socket_info3))

    def test_filter_state(self) -> None:
        """ TODO2: docstring here """

        # Test match
        fil = GenericFilter("test", states="SYN_SENT,ESTABLISHED")
        socket_info1: SocketInfo = SocketInfo._create_from_params(state="ESTABLISHED")
        self.assertTrue(fil.filter_out(socket_info1))

        # Test mismatch
        socket_info2: SocketInfo = SocketInfo._create_from_params(state="CLOSED")
        self.assertFalse(fil.filter_out(socket_info2))

    def setUp(self) -> None:
        pass

def run_all_tests() -> bool:
    """ TODO2: docstring here """

    passed: bool = True
    # TestSocketInfo
    suite1: TestSuite = TestLoader().loadTestsFromTestCase(TestSocketInfo)
    result1: TestResult = TextTestRunner(verbosity=3).run(suite1)
    if not result1.wasSuccessful():
        passed = False

    # TestFilters
    suite2: TestSuite = TestLoader().loadTestsFromTestCase(TestFilters)
    result2: TestResult = TextTestRunner(verbosity=3).run(suite2)
    if not result2.wasSuccessful():
        passed = False

    return passed

def run_specific_tests() -> bool:
    """ TODO2: docstring here """

    passed: bool = True
    suite = TestSuite()

    #suite.addTest(TestSocketInfo('test_construct'))
    #suite.addTest(TestSocketInfo('test_parsing_ip6'))
    #suite.addTest(TestSocketInfo('test_parsing_ip_port'))

    #suite.addTest(TestFilters('test_filter_cmdline'))

    result: TestResult = TextTestRunner(verbosity=3).run(suite)
    if not result.wasSuccessful():
        passed = False

    return passed

def main() -> None:
    """ TODO2: docstring here """

    passed: bool = run_all_tests()
    #passed = run_specific_tests()
    if passed:
        sys.exit()
    else:
        sys.exit("Test(s) failed!")

if __name__ == '__main__':
    main()
